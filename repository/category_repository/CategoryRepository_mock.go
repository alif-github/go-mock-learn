// Code generated by MockGen. DO NOT EDIT.
// Source: src/go-mock-learn/repository/category_repository (interfaces: ICategory)

// Package category_repository is a generated GoMock package.
package category_repository

import (
	sql "database/sql"
	gomock "go.uber.org/mock/gomock"
	reflect "reflect"
	"src/go-mocks-learn/entity"
)

// MockICategory is a mock of ICategory interface.
type MockICategory struct {
	ctrl     *gomock.Controller
	recorder *MockICategoryMockRecorder
}

// MockICategoryMockRecorder is the mock recorder for MockICategory.
type MockICategoryMockRecorder struct {
	mock *MockICategory
}

// NewMockICategory creates a new mock instance.
func NewMockICategory(ctrl *gomock.Controller) *MockICategory {
	mock := &MockICategory{ctrl: ctrl}
	mock.recorder = &MockICategoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICategory) EXPECT() *MockICategoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockICategory) FindByID(arg0 *sql.DB, arg1 entity.CategoryEntity) (entity.CategoryEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(entity.CategoryEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockICategoryMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockICategory)(nil).FindByID), arg0, arg1)
}
